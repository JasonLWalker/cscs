include("functions.cscs");
start = pstime;

print("Testing strings");
txt = "lu";
txt += txt;
txt = txt + "_";
txt += "la";
txt += 1;
Test(txt, "lulu_la1");

txt = "lu";
txt += txt + substr(txt, 0, 1) + "_" + 1;
Test(txt, "lulul_1");

bb = "abc_blah";
c = substr(bb, 4, 3);
Test(c, "bla");
ind = indexof(bb, "bla");
Test(ind, 4);

print("Testing numbers");
a=(-3+2*9)-(10-15);
a++; --a;
print("a=[", a, "]");
Test(a, 20);

x = 1;
b = x++ - x--; // b = -1, x = 1
Test(x, 1);
Test(b, -1);
c = x = (b += 1); // x = b = c = 0,
Test(x, 0);
Test(b, 0);
Test(c, 0);
x -= ++c; // c = 1, x = -1
Test(x, -1);
Test(c, 1);

Test(2-11-3*7, -30);
Test((((-5.5))), -5.5);
Test(((16-3)-3)+15/2*5, 47.5);
Test(1-2-3-(4-(5-(6-7)))-pow(2,3*exp(14-7*2)), -10);
Test(3*50-3*pow(2,4)*3, 6);
Test(++a-a--, 0);
Test((a++)-(--a), 0);
Test(a, 20);
Test(1-a--, -19);
Test((a++)-(--a)-a--, -19);
Test(a, 18);
Test(sin(pi/2), 1);
Test(cos(pi/2), 0);
Test(tan(pi/2), 1.63317787283838E+16);

a = 19;
Test((a++)-(--a)-a--, a - 2 * a - 1);
Test((a++)-(--a)-a--, a - 2 * a - 1);

x = 2.0E+15 + 3e+15 - 1.0e15;
Test(x, 4e+15);

print;

n = 10;
getPrimes(n);
Test(isPrime(5), 1);
Test(isPrime(6), 0);
function isInteger(candidate) {
  return candidate == round(candidate);
}

n="blah";
if (!isInteger(n) || n < 0) {
  Test(n, n);
} else {
  Test("integer", n);
}

c = 0; b = 2;
c+=3;
Test(c, 3);
b*=5;
Test(b/=2, 5);

print("Testing factorial(5): ");
Test(factorial(5), 120);

a=1;
c=0;
Test(a||c, 1);
Test(c&&b, 0);

a[1]=1;
a[2]=2;
c=a[1]+a[2];
Test(c, 3);

a[1][2]=22;
a[5][3]=15;
a[1][2]-=100;
a[5][3]+=100;

Test(a[1][2], -78);
Test(a[5][3], 115);

print(a[5][2]);

i=13;
i++;
print(i);
a[1][2]++;
print(a[1][2]);
print(a[5][3]++);
print(a[5][3]++);
print(a[5][3]++);
Test(a[5][3], 118);

print(++a[5][3]);
print(++a[5][3]);
print(++a[5][3]);
print(a[5][3]++);
Test(a[5][3], 122);

print(--a[5][3]);
print(--a[5][3]);
print(--a[5][3]);
print(a[5][3]--);
print(a[5][3]--);
print(a[5][3]--);
Test(a[5][3], 116);

i=10;

while(--i > 0) {
  newarray[i] = 2*i;
}
print("size(newarray)=", size(newarray));
Test(i, 0);
Test(newarray[9], 18);
Test(size(newarray), 10);

print("Testing short circuit evaluation");
function f(x) {
  counter++;
  return x;
}
counter = 0; Test(f(0) && f(1), 0); Test(counter, 1);
counter = 0; Test(f(1) && f(0), 0); Test(counter, 2);
counter = 0; Test(f(1) || f(2), 1); Test(counter, 1);
counter = 0; Test(f(0) || f(3), 1); Test(counter, 2);

a = (f(1) && ((sin(0) || sin(1*2)) && f(2) && (f(3) || f(4))));
Test(a, 1);

print("Testing arrays and maps");
arr[2] = 10; arr[1] = "str";
Test(type(arr),    "ARRAY");
Test(type(arr[0]), "NONE");
Test(type(arr[1]), "STRING");
Test(type(arr[2]), "NUMBER");

x["bla"]["blu"]=113;
Test(contains (x["bla"], "blu"), 1);
Test(contains (x["bla"], "bla"), 0);
x["blabla"]["blablu"]=125;
Test(--x["bla"]["blu"] + x["blabla"]["blablu"]--, 237);

b[5][3][5][3]=15;
print(++b[5][3][5][3]);
print(++b[5][3][5][1]); // NaN expected here
b[5][3][5][3]*=1000;
Test(b[5][3][5][3], 16000);
Test(size(b), 6);
Test(size(b[5]), 4);
Test(size(b[5][3]), 6);
Test(size(b[5][3][5]), 4);
Test(size(b[5][3][5][3]), 5);

bla="bla";
x["bla"]=13;
x["blabla"]=26;
Test(x["bla"], 13);
Test(size(x), 2);
Test(contains(x, "bla") , 1);
Test(contains(x, "bla2"), 0);
Test(x["bla"] + x["blabla"], 39);

x["bla"]["blu"]=113;
Test(contains(x["bla"], "blu"), 1);
Test(contains(x["bla"], "bla"), 0);
x["bla"]["blu"]++;
Test(x["bla"]["blu"], 114);
x["blabla"]["blablu"]=126;
--x["blabla"]["blablu"];
Test(x["blabla"]["blablu"], 125);

Test(--x["bla"]["blu"] + x["blabla"]["blablu"]--, 238);
print(--x["blabla"]["blablu"]);
print(--x["blabla"]["blablu"]);
print(--x["blabla"]["blablu"]);
print(x["blabla"]["blablu"]++);
print(x["blabla"]["blablu"]++);
print(x["blabla"]["blablu"]++);

x = 20 * sin(pow(pi,2));
cache["if"] = -10 * x;
cache["else"] = 10 * x;
if (x < 0 && log(x + 3*pow(10,2)) < 6*exp(x) ||
             x < 1 - pi) {
  print("OK, in if, x=", x, ", cache=", cache["if"]);
} else {
  print("ERROR, in else, cache=", cache["else"]);
}

a={0};
i = 0;
while(++i < 10) {
  add(a, 2*i);
}
print (a);
i -= 5;
d=a[--i];
Test(d, 8);
Test(i, 4);

n=1.5;
try {
  c = catalan(n);
  print("catalan(", n, ")=", c);
  print("ERROR. Exception needed for n=", n);
} catch(exc) {
  print("OK. Caught: " + exc);
}
n=-10;
try {
  c = catalan(n);
  print("catalan(", n, ")=", c);
  print("ERROR. Exception needed for n=", n);
} catch(exc) {
  print("OK. Caught: " + exc);
}
n=10;
try {
  c = catalan(n);
  print("catalan(", n, ")=", c);
} catch(exc) {
  print("ERROR. Caught: " + exc);
}

f = fibonacci(n);
print("fibonacci(", n, ")=", f);
Test(f, 55);
c = catalan(n);
print("catalan(", n, ")=", c);
Test(c, 16796);

i = 0; b = 0;
while(i < 13)
{
  b += (i*4 - 1);
  i++;
  if ( i >= 4) {
    print("in if, i==", i, ", break");
    break;
  } else {
    print("in else, i==", i, ", continue");
    continue;
  }
  print("this is never reached");
}
print("while() done");

n = 0; y = 1;
a =  !!!n && !!y;
Test(a, 1);
b =  !a || !y || n;
Test(b, 0);
c =  !!(!y || !n && y);
Test(c, 1);

a = 1+(25-2*3);
arr = {++a-a--, ++a*exp(0)/a--, -2*(--a-++a), ++a/(a/3), 2 * sqrt(pow(2, 2))};
print(arr);
i = 0;
while(i < size(arr)) {
  print("arr[", i, "]=", arr[i], ", expecting ", i);
  i++;
}

if (2*pow(2,4) > pow(2,5)*2 || factorial(3) == 24) {
  print("if not expected");
} elif(exp(3) <= (3*(pow(2,3)+1)-(1-sin(pi))) && factorial(4) == 24) {
  print(exp(3), "<=", (3*(pow(2,3)+1)-(1-sin(pi))), " expected");
} else {
  print("else not expected");
}

b = "bla";
i = 0;
while(i < 13)
{
  b += (i*4 - 1);
  i++;
  if ( i == 3) {
    break;
  } else {
    continue;
  }
  //print("this is never reached");
}
Test(b, "bla-137");

print("who are \"you\" my friend?"," e=", 0+exp(1)-2*sin(0), ", pi=", pi);

a = 23; b = 22;
cond = "na";
if (a < b) {
  if (b < 15) {
    cond = "cond1";
  }
  elif  (b < 50) {
    cond = "cond2";
  }
}
elif (a >= 25) {
  cond = "cond3";
}
else {
  cond = "cond4";
}
Test(cond, "cond4");
print();

a=1;
b=2;
c=0;
Test(a&&c, 0);
Test(a||c, 1);
Test(a||b, 1);
Test(!a&&!b, 0);
Test(!a && !c, 0);
Test(! a || !c, 1);
Test(!a || !b, 0);
Test(a && b && !c, 1);
Test(a || b ||  c, 1);
Test(!a || !b || c, 0);

i = 10;
while(--i > 0) {
  newarray[i] = 2*i;
}
print("size(newarray)=", size(newarray));
Test(i, 0);
Test(newarray[9], 18);
Test(size(newarray), 10);

function trySuite(n) {
  print("Trying to calculate negative factorial...");
  result = tryNegative(n);
  return result;
}

function tryNegative(n) {
  return factorial(-1 * n);
}
function tryNonInteger(n) {
  print ("In try non-integer");
  return factorial(n + 0.5);
}
function tryZeroDivision() {
  return cot(0);
}

function variableTest() {
  print("In function start, n=", n);
  n = sqrt((32*8*4 - 10*(3+7) + 19*4) * 10) / 5;
  Test(n, 20);
  print("In function end, n=", n);
}

function convertToNegative(n) {
  return -1 * n;
}
n = 5;
try {
  f = trySuite(n);
  print("factorial(", n, ")=", f);
}
catch(exc) {
  print ("Caught Exception: ", exc);
}

try {
  f = tryNonInteger(n);
  print("factorial(", n, ")=", f);
}
catch(exc) {
  print ("Caught Exception: ", exc);
}

try {
  print ("In try zero division ");
  f = tryZeroDivision();
  print("cot(0)=", f);
}
catch(exc) {
  print ("Caught Exception: ", exc);
}

print("After try-catches");

n *= 2;
f=factorial(n);
print("factorial(", n, ")=", f);

variableTest();
print("After function, n=", n);

слова = {"Это", "написано", "по-русски"};
размер = size(слова);
и = 0;
while(и < размер) {
  if (и  % 2 == 0) {
    print(слова[и]);
  }
  и++;
}

for (i = 10; i >= 0; i--) {
  print(i, " ");
  arr[i] = 2*i;
}
i = 10;
print;
for (;;) {
  print(i, " ");  arr[i] = 2*i;
  i--;
  if (i < 0) { break; }
}
print;
for (item : arr) {
  print(item, " ");
}
print;
Test("x","x");

test1 = {0,3,5};
test1[1][2]=3;

if(test1[1][2] == 3) { result="equal";}
else { result="not equal"; }
Test(result, "equal");

if(test1[1] == 5) { result="equal";}
else { result="not equal"; }
Test(result, "not equal");

if(3 == test1[2]) { result="equal";}
else { result="not equal"; }
Test(result, "not equal");

if(5 == test1[2]) { result="equal";}
else { result="not equal"; }
Test(result, "equal");

ab=2;
if(ab == 2) { result="equal";}
else { result="not equal"; }
Test(result, "equal");

if(2 != ab) { result="equal";}
else { result="not equal"; }
Test(result, "not equal");

if (sin(10) > -1) { result = "sintestOK"; }
else { result = "sintestNotOK";  }
Test(result, "sintestOK");

objName = "Columns";
if (indexof(objName,"Columns") > -1) { result = "indexofOK"; }
else { result = "indexofNotOK";  }
Test(result, "indexofOK");

objName = "aColumns";
if (indexof(objName,"Columns") < 1) { result = "indexofNotOK"; }
else { result = "indexofOK";  }
Test(result, "indexofOK");

test1 = {1,0};
test2 = {0,1};
if (test1 != test2) { result = "not equal";}
else {  result = "equal"; }
Test(result, "not equal");

test2 = {1,0};
if (test1 != test2) { result = "not equal";}
else {  result = "equal"; }
Test(result, "equal");

if (1==2 || 2==2) { result = "true"; }
else { result = "false"; }
Test(result, "true");

if (2==2 || 1==2) { result = "true"; }
else { result = "false"; }
Test(result, "true");

if (1==2 && 2==2) { result = "true"; }
else { result = "false"; }
Test(result, "false");

if (2==2 && 1==2) { result = "true"; }
else { result = "false"; }
Test(result, "false");
function threadWork() {
  sleep(10);
  print("  Starting thread work in thread", threadid());
  sleep(1000);
  print("  Finishing thread work in thread", threadid());
  signal();
}

print("Main, starting new thread from ", threadid());
thread(threadWork());
print("Main, waiting for thread in ", threadid());
wait();
print("Main, wait returned in ", threadid());

function returnTest(par) {
  if (par <= 10) {
    return 1;
  } elif (par <= 20) {
    b = 20;
    return 2;
  } elif (par <= 30) {
    return 3;
    b = 30;
  } elif (par <= 40) {
    b = 40;
    return 4;
    b = 50;
  }
  b = 60;
  return 5;
}
b = 10;
result = returnTest(9);
Test(result, 1); Test(b, 10);
result = returnTest(19);
Test(result, 2); Test(b, 20);
result = returnTest(30);
Test(result, 3); Test(b, 20);
result = returnTest(40);
Test(result, 4); Test(b, 40);
result = returnTest(50);
Test(result, 5); Test(b, 60);

a[0] = 0;
b[a[0]] = 1;
Test(b[a[0]], 1);

c[b[a[0]]] = 5;
Test(c[b[a[0]]], 5);

a=-2; b=2;
f1 = a > 0 && b < 0 ? 10 : -10;
Test(f1, -10);
f2 = a < 0 && b < 0 ? 10 : -10;
Test(f2, -10);
f3 = a < 0 && b > 2 ? 10 : -10;
Test(f3, -10);
t1 = a < 0 && b > 0 ? 10 : -10;
Test(t1, 10);
s1 = a < 0 ? -20 : b > 0 ? 20 : -30;
Test(s1, -20);
s2 = a > 0 ? -20 : b > 0 ? 20 : -30;
Test(s2, 20);
s3 = a > 0 ? -20 : b < 0 ? 20 : -30;
Test(s3, -30);

x=c=2;
++x;
Test(c, 2);
Test(x, 3);

function compute(base, power, str, extra) {
  x = pow(base, power) * extra;
  newStr = "Hi " + str;
  return x;
}
function work(loops) {
  x = 0.0;
  for(i = 0; i < loops; i++) {
     x = (2*compute(2, 3, "test", 1000) + 2000)/2;
  }
  return (2*compute(2, 3, "test", 1000) + 2000)/2;
}
Test(work(1), 9000);

print("Testing named and default arguments...");
function myp(par1, par2, par3 = 100) {
  return par1 + par2 + par3;
}

function concat(par1, par2, par3 = "", par4 = "", par5 = "", par6= "") {
  return par1 + par2 + par3 + par4 + par5;
}

x = myp(par1 = 11, par2 = 21);
Test(x, 132);

y = concat(par3="ghi", par2="def_", par1="abc_", par5="_z");
Test(y, "abc_def_ghi_z");

z = myp(par2=20, par1=70);
Test(z, 190);

try {
  z = myp(par2=20);
  print("Error. Missing Exception: Function [myp] arguments mismatch: 3 declared, 1 supplied.");
} catch(exc) {
  print("OK. Caught: " + exc);
}
try {
  z = myp(par2=20, par3=70);
  print("Error. Missing Exception: No argument [par1] given for function [myp].");
} catch(exc) {
  print("OK. Caught: " + exc);
}

print("Testing Classes and Inheritance");
class Stuff1 {
  x = 2;
  Stuff1(a) {
    x = a;
  } 
  function addStuff1(n) {
    return n + x;
  }
}

class Stuff2 {
  y = 3;
  Stuff2(b) {
    y = b;
  } 
  function addStuff2(n) {
    return n + y;
  }
}

class CoolStuff : Stuff1, Stuff2 {
  z = 3;
  CoolStuff(a, b, c) {
    x = a;
    y = b;
    z = c;
  } 
  function addCoolStuff() {
    return x + y + z;
  }
}

addition = 100;
obj1 = new Stuff1(10);
Test(obj1.x, 10);
Test(obj1.addStuff1(addition), 110);

obj2 = new Stuff2(20);
Test(obj2.y, 20);
Test(obj2.addStuff2(addition), 120);

newObj = new CoolStuff(11, 13, 17);
Test(newObj.x, 11);
Test(newObj.y, 13);
Test(newObj.z, 17);
Test(newObj.addCoolStuff(), 41);
Test(newObj.addStuff1(addition), 111);
Test(newObj.addStuff2(addition), 113);

end = pstime;
print("Process CPU Time: ", end, " ms. Script execution: ", end - start, " ms.");
